{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport var useMediaQuery = function useMediaQuery(_ref) {\n  var query = _ref.query;\n\n  var _useState = useState(true),\n      mediaMatch = _useState[0],\n      setMediaMatch = _useState[1]; // const mediaMatch = window.matchMedia(query);\n\n\n  var _useState2 = useState(mediaMatch.matches),\n      matches = _useState2[0],\n      setMatches = _useState2[1];\n\n  useEffect(function () {\n    setMediaMatch(window.matchMedia(query));\n  }, []);\n  useEffect(function () {\n    if (mediaMatch) {\n      var handler = function handler(e) {\n        return setMatches(e.matches);\n      };\n\n      mediaMatch.addListener(handler);\n      return function () {\n        return mediaMatch.removeListener(handler);\n      };\n    } else return;\n  }, [mediaMatch]);\n  return matches;\n};","map":{"version":3,"sources":["/Users/thomasharbin/Documents/GitHub/portfolio-old-school/utils/useMediaQuery.js"],"names":["useEffect","useState","useMediaQuery","query","mediaMatch","setMediaMatch","matches","setMatches","window","matchMedia","handler","e","addListener","removeListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACNF,QAAQ,CAAC,IAAD,CADF;AAAA,MACnCG,UADmC;AAAA,MACvBC,aADuB,iBAE1C;;;AAF0C,mBAGZJ,QAAQ,CAACG,UAAU,CAACE,OAAZ,CAHI;AAAA,MAGnCA,OAHmC;AAAA,MAG1BC,UAH0B;;AAK1CP,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,aAAa,CAACG,MAAM,CAACC,UAAP,CAAkBN,KAAlB,CAAD,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAII,UAAJ,EAAgB;AACd,UAAMM,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,eAAIJ,UAAU,CAACI,CAAC,CAACL,OAAH,CAAd;AAAA,OAAjB;;AACAF,MAAAA,UAAU,CAACQ,WAAX,CAAuBF,OAAvB;AACA,aAAO;AAAA,eAAMN,UAAU,CAACS,cAAX,CAA0BH,OAA1B,CAAN;AAAA,OAAP;AACD,KAJD,MAIO;AACR,GANQ,EAMN,CAACN,UAAD,CANM,CAAT;AAOA,SAAOE,OAAP;AACD,CAjBM","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useMediaQuery = ({ query }) => {\n  const [mediaMatch, setMediaMatch] = useState(true);\n  // const mediaMatch = window.matchMedia(query);\n  const [matches, setMatches] = useState(mediaMatch.matches);\n\n  useEffect(() => {\n    setMediaMatch(window.matchMedia(query));\n  }, []);\n\n  useEffect(() => {\n    if (mediaMatch) {\n      const handler = e => setMatches(e.matches);\n      mediaMatch.addListener(handler);\n      return () => mediaMatch.removeListener(handler);\n    } else return\n  }, [mediaMatch]);\n  return matches;\n};\n"]},"metadata":{},"sourceType":"module"}