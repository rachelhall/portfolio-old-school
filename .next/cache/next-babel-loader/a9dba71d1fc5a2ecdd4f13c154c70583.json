{"ast":null,"code":"var _jsxFileName = \"/Users/thomasharbin/Documents/GitHub/portfolio-old-school/components/movies/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport plyr from \"plyr\"; // styles\n\nimport \"./styles.module.scss\"; // data\n\nimport { movies } from \"../../data\";\n\nconst Movies = () => {\n  const {\n    0: videoId,\n    1: setVideoId\n  } = useState(movies[0].url);\n  const {\n    0: modalOpen,\n    1: setModalOpen\n  } = useState(false);\n\n  const openVideoModal = () => {\n    setVideoId(item.url);\n  };\n\n  const toggleModalOpen = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  return __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, modalOpen ? __jsx(\"div\", {\n    className: \"videoplayer-container modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    class: \"modal-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    class: \"close-btn\",\n    onClick: toggleModalOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"\\xD7\")), __jsx(\"div\", {\n    class: \"plyr__video-embed modal-content\",\n    id: \"player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"iframe\", {\n    src: videoId,\n    allowfullscreen: true,\n    allowtransparency: true,\n    allow: \"autoplay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }))) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"single-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"singleItem-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, movies.map((item, i) => {\n    return __jsx(\"li\", {\n      className: \"singleItem-link\",\n      onClick: toggleModalOpen,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), item.name);\n  }))));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/thomasharbin/Documents/GitHub/portfolio-old-school/components/movies/index.js"],"names":["useState","useEffect","Fragment","PropTypes","plyr","movies","Movies","videoId","setVideoId","url","modalOpen","setModalOpen","openVideoModal","item","toggleModalOpen","map","i","name"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AACA,OAAO,sBAAP,C,CAEA;;AACA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAACK,MAAM,CAAC,CAAD,CAAN,CAAUI,GAAX,CAAtC;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMY,cAAc,GAAG,MAAM;AAC3BJ,IAAAA,UAAU,CAACK,IAAI,CAACJ,GAAN,CAAV;AACD,GAFD;;AAIA,QAAMK,eAAe,GAAG,MAAM;AAC5BH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAIA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,SAAS,GACR;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,KAAK,EAAC,WAAZ;AAAwB,IAAA,OAAO,EAAEI,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF,EAIE;AAAK,IAAA,KAAK,EAAC,iCAAX;AAA6C,IAAA,EAAE,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEP,OADP;AAEE,IAAA,eAAe,MAFjB;AAGE,IAAA,iBAAiB,MAHnB;AAIE,IAAA,KAAK,EAAC,UAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADQ,GAeR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,EAmBE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACU,GAAP,CAAW,CAACF,IAAD,EAAOG,CAAP,KAAa;AACvB,WACE;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAgC,MAAA,OAAO,EAAEF,eAAzC;AAA0D,MAAA,GAAG,EAAEE,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAGMH,IAAI,CAACI,IAHX,CADF;AAUD,GAXA,CADH,CADF,CAnBF,CADF;AAsCD,CAlDD;;AAoDA,eAAeX,MAAf","sourcesContent":["import { useState, useEffect, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport plyr from \"plyr\";\n\n// styles\nimport \"./styles.module.scss\";\n\n// data\nimport { movies } from \"../../data\";\n\nconst Movies = () => {\n  const [videoId, setVideoId] = useState(movies[0].url);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const openVideoModal = () => {\n    setVideoId(item.url);\n  };\n\n  const toggleModalOpen = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <Fragment>\n      {modalOpen ? (\n        <div className=\"videoplayer-container modal\">\n          <div class=\"modal-header\">\n            <span class=\"close-btn\" onClick={toggleModalOpen}>&times;</span>\n          </div>\n          <div class=\"plyr__video-embed modal-content\" id=\"player\">\n            <iframe\n              src={videoId}\n              allowfullscreen\n              allowtransparency\n              allow=\"autoplay\"\n            ></iframe>\n          </div>\n        </div>\n      ) : (\n        <div></div>\n      )}\n\n      <div className=\"single-item\">\n        <ul className=\"singleItem-list\">\n          {movies.map((item, i) => {\n            return (\n              <li className=\"singleItem-link\" onClick={toggleModalOpen} key={i}>\n               <p>\n                   </p> \n                   {item.name}\n                {/* <a href={item.url} target=\"_blank\" className=\"singleItem-link\">\n                  {item.name}\n                </a> */}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}