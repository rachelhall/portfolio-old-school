{"ast":null,"code":"var _jsxFileName = \"/Users/thomasharbin/Documents/GitHub/portfolio-old-school/pages/home/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, Fragment, useEffect, createContext } from \"react\";\nimport { motion } from \"framer-motion\"; // styles\n\nimport \"../home/styles.scss\"; //componenets\n\nimport Icons from \"../../components/Icons\";\nimport PreferencesWindow from \"../../components/PreferencesWindow\";\nimport WebsitesWindow from \"../../components/websitesWindow\";\nimport Nav from \"../../components/nav\";\nimport ReusableWindow from \"../../components/reusableWindow\";\nimport SingleSite from \"../../components/singleSite\"; // data\n\nimport windowData from \"../../data.js\";\nexport const WindowCTX = createContext({});\n\nconst Home = () => {\n  const constraintsRef = useRef(null);\n  const iconConstraints = useRef(null);\n  const {\n    0: canDrag,\n    1: setCanDrag\n  } = useState(false);\n  useEffect(() => {\n    const mediaMatch = window.matchMedia(\"(min-width: 500px)\");\n    setCanDrag(mediaMatch.matches);\n  }, []);\n  const {\n    0: wallpaper,\n    1: setWallpaper\n  } = useState(\"green\"); // create context\n  // create default state\n  // wrap in a provider\n  // useContext Hook\n\n  const changeWallpaper = newWallpaper => {\n    setWallpaper(newWallpaper);\n  };\n\n  const {\n    0: windowOpen,\n    1: setWindowOpen\n  } = useState(`${windowData[0].title}open`);\n\n  const closeWindow = () => {\n    setWindowOpen(null);\n  };\n\n  return __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(WindowCTX.Provider, {\n    value: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(motion.div, {\n    ref: constraintsRef,\n    className: wallpaper === \"stars\" ? \"entire-display stars\" : wallpaper === \"blue\" ? \"entire-display blue\" : \"entire-display\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), windowData.map(window => {\n    return __jsx(motion.div, {\n      drag: true,\n      dragMomentum: false,\n      dragConstraints: {\n        left: -300,\n        top: -50,\n        bottom: 500,\n        right: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, __jsx(ReusableWindow, {\n      title: window.title,\n      bodyContent: window.bodyContent,\n      windowOpen: windowOpen,\n      closeWindow: closeWindow,\n      changeWallpaper: changeWallpaper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }), __jsx(motion.div, {\n    className: \"icons-container\",\n    ref: iconConstraints,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(Icons, {\n    setWindowOpen: setWindowOpen,\n    windowOpen: windowOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/thomasharbin/Documents/GitHub/portfolio-old-school/pages/home/index.js"],"names":["useState","useRef","Fragment","useEffect","createContext","motion","Icons","PreferencesWindow","WebsitesWindow","Nav","ReusableWindow","SingleSite","windowData","WindowCTX","Home","constraintsRef","iconConstraints","canDrag","setCanDrag","mediaMatch","window","matchMedia","matches","wallpaper","setWallpaper","changeWallpaper","newWallpaper","windowOpen","setWindowOpen","title","closeWindow","map","left","top","bottom","right","bodyContent"],"mappings":"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","sourcesContent":["import { useState, useRef, Fragment, useEffect, createContext } from \"react\";\nimport { motion } from \"framer-motion\";\n\n// styles\nimport \"../home/styles.scss\";\n\n//componenets\nimport Icons from \"../../components/Icons\";\nimport PreferencesWindow from \"../../components/PreferencesWindow\";\nimport WebsitesWindow from \"../../components/websitesWindow\";\nimport Nav from \"../../components/nav\";\nimport ReusableWindow from \"../../components/reusableWindow\";\nimport SingleSite from \"../../components/singleSite\";\n\n// data\nimport windowData from \"../../data.js\";\n\nexport const WindowCTX = createContext({});\n\nconst Home = () => {\n  const constraintsRef = useRef(null);\n  const iconConstraints = useRef(null);\n\n  const [canDrag, setCanDrag] = useState(false);\n\n  useEffect(() => {\n    const mediaMatch = window.matchMedia(\"(min-width: 500px)\");\n    setCanDrag(mediaMatch.matches);\n  }, []);\n\n  const [wallpaper, setWallpaper] = useState(\"green\");\n\n  // create context\n  // create default state\n  // wrap in a provider\n  // useContext Hook\n\n  const changeWallpaper = newWallpaper => {\n    setWallpaper(newWallpaper);\n  };\n\n  const [windowOpen, setWindowOpen] = useState(`${windowData[0].title}open`);\n\n  const closeWindow = () => {\n    setWindowOpen(null);\n  };\n\n  return (\n    <Fragment>\n      <WindowCTX.Provider value={{}}>\n        <motion.div\n          ref={constraintsRef}\n          className={\n            wallpaper === \"stars\"\n              ? \"entire-display stars\"\n              : wallpaper === \"blue\"\n              ? \"entire-display blue\"\n              : \"entire-display\"\n          }\n        >\n          <Nav />\n\n          {/* {canDrag ? (\n          <motion.div\n          drag\n          dragMomentum={false}\n          dragConstraints={{\n            left: -300,\n            top: -50,\n            bottom: 500,\n            right: 300\n          }}\n          >\n          <Window />\n          </motion.div>\n          ) : (\n            <Window />\n          )} */}\n\n          {windowData.map(window => {\n            return (\n              <motion.div\n                drag\n                dragMomentum={false}\n                dragConstraints={{\n                  left: -300,\n                  top: -50,\n                  bottom: 500,\n                  right: 300\n                }}\n              >\n                <ReusableWindow\n                  title={window.title}\n                  bodyContent={window.bodyContent}\n                  windowOpen={windowOpen}\n                  closeWindow={closeWindow}\n                  changeWallpaper={changeWallpaper}\n                />\n              </motion.div>\n            );\n          })}\n\n          <motion.div className=\"icons-container\" ref={iconConstraints}>\n            <Icons setWindowOpen={setWindowOpen} windowOpen={windowOpen} />\n          </motion.div>\n        </motion.div>\n      </WindowCTX.Provider>\n    </Fragment>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}